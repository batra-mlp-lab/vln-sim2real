#!/usr/bin/env python
''' Load rosbags generated by running the subgoal model on Coda data, and output
    an error analysis. '''

from __future__ import print_function
import json
import math
import os
import rosbag
import numpy as np

import matplotlib.pyplot as plt
from matplotlib.path import Path
from matplotlib.lines import Line2D
import matplotlib.patches as patches


from eval import load_nav_graph
from viz_paths import img_extent, pixel_origin, pixel_scale, im_width, im_height, PATH_OFFSET, MARKER_SIZE, BASE_DIR, MAP, CONN, OUT_DIR

#BAG_FILE = 'src/vln_subgoals/bags/vln-sim2real-subgoal_2020-07-29-02-22-26.bag'
BAG_FILE = 'src/vln_subgoals/bags/vln-sim2real-subgoal_2020-09-16-23-16-12.bag'
 


def read_bag(filename):
    bag = rosbag.Bag(filename)
    print (bag)

    predictions = {}
    viewpoint = None
    for topic, msg, t in bag.read_messages(topics=['/mock/hint', '/subgoal/waypoints']):
        if topic == '/mock/hint':
            viewpoint = msg.viewpoint
        elif topic == '/subgoal/waypoints':
            assert viewpoint, 'Hint must come before waypoint predictions'
            if viewpoint in predictions:
                return predictions  # Prediction loops after finishing
            # Ignore the last waypoint, which is (0,0) for stay in the same position
            predictions[viewpoint] = [[item.position.x, item.position.y] for item in msg.poses[:-1]]
            viewpoint = None
    print('Found %d predictions' % len(predictions))

    bag.close()
    return predictions



def plot_subgoal_predictions():

    if not os.path.exists(OUT_DIR):
        os.makedirs(OUT_DIR)

    graph = load_nav_graph(CONN)['yZVvKaJZghh']
    predictions = read_bag(BAG_FILE)
    img = plt.imread(MAP)

    fig, ax = plt.subplots(figsize=(8, 6), dpi=300)
    ax.imshow(img, extent=img_extent())
    ax.set_xlim([-25,10])
    ax.set_ylim([-15,15])
    ax.set_xlabel('m')
    ax.set_ylabel('m', rotation='horizontal')

    for viewpoint, waypoints in predictions.iteritems():

        pos = graph.node[viewpoint]['position'][:2]
        x_pos = []
        y_pos = []
        for waypoint in waypoints:
            x_pos.append(pos[0] - waypoint[1])
            y_pos.append(pos[1] + waypoint[0])
        ax.scatter(x_pos, y_pos, marker='o', zorder=3, color='red', s=10, alpha=0.8)
        ax.scatter(pos[0], pos[1], marker='o', zorder=2, color='blue', s=20)

    plt.savefig('%s%s.png' % (OUT_DIR, 'subgoal_predictions'))
    plt.waitforbuttonpress(0) 
    plt.close()

    # Histogram
    data = []
    for viewpoint, waypoints in predictions.iteritems():
        pos = graph.node[viewpoint]['position'][:2]
        for neighbor in graph.neighbors(viewpoint):
            gt = graph.node[neighbor]['position'][:2]
            # Find closest prediction for each gt position
            nearest_dist = 10e6
            #print('GT: %.1f, %.1f' % (gt[0], gt[1]))
            for waypoint in waypoints:
                pred_x = pos[0] - waypoint[1]
                pred_y = pos[1] + waypoint[0]
                #print('Pred: %.1f, %.1f' % (pred_x, pred_y))
                dist = ((pred_x - gt[0])**2 + (pred_y - gt[1])**2)**0.5
                #print('dist: %0.1f' % dist)
                if dist < nearest_dist:
                    nearest_dist = dist
            assert nearest_dist != 10e6
            #print(nearest_dist)
            data.append(nearest_dist)

    print(len(data))
    print(sorted(data))
    print(np.histogram(data, bins=np.linspace(0, 4, num=17)))



if __name__ == '__main__':

    plot_subgoal_predictions()





